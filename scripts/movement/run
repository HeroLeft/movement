#!/bin/bash -e
set -euo pipefail

export PATH=$PATH:./target/release
export PROC_COMP_CONFIG=$HOME
export PC_LOG_FILE=proc-compose.temp.log

# if proc_compose config does not exist at $PROC_COMP_CONFIG/settings.yaml, create it
if [ ! -f $PROC_COMP_CONFIG/settings.yaml ]; then
    mkdir -p $PROC_COMP_CONFIG
    touch $PROC_COMP_CONFIG/settings.yaml
fi

export MOVEMENT_BASE_STORAGE_PATH="./.movement"
mkdir -p $MOVEMENT_BASE_STORAGE_PATH
echo "Using sequencer storage path: $MOVEMENT_BASE_STORAGE_PATH"

# If keeping the storage path, is desired for debugging, comment out the line
# below or set a custom storage path in process-compose.yaml.
trap "exit" INT TERM
trap cleanup EXIT
cleanup(){
    echo "Cleaning up storage: $MOVEMENT_BASE_STORAGE_PATH"
    # rm -rv "$MOVEMENT_BASE_STORAGE_PATH"
    rm -rv "$PC_LOG_FILE"
}

# split the second argument into an array
# DOES THIS NEED TO BE FIXED
IFS='.' read -r -a split <<< "$2"

# call prelude script with unpacked arguments
. ./scripts/preludes/$1/prelude "${split[@]}"

# each element in the array identifies a process-compose override file map each element to a process-compose override file of the form process-compose/$1/overrides/process-compose.$element.yml
# and pass the resulting array as arguments to process-compose
override_files=()
for element in "${split[@]}"; do
    override_files+=("-f")
    override_files+=("process-compose/$1/process-compose.$element.yml")
done

process-compose -f process-compose/$1/process-compose.yml "${override_files[@]}"  "${@:3}"
cat $PC_LOG_FILE